# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jsearch.api.models.base_model_ import Model
from jsearch.api import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, block_hash: str=None, block_number: int=None, _from: str=None, gas: str=None, gas_price: str=None, hash: str=None, input: str=None, nonce: str=None, r: str=None, s: str=None, to: str=None, transaction_index: int=None, v: str=None, value: str=None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param block_hash: The block_hash of this Transaction.  # noqa: E501
        :type block_hash: str
        :param block_number: The block_number of this Transaction.  # noqa: E501
        :type block_number: int
        :param _from: The _from of this Transaction.  # noqa: E501
        :type _from: str
        :param gas: The gas of this Transaction.  # noqa: E501
        :type gas: str
        :param gas_price: The gas_price of this Transaction.  # noqa: E501
        :type gas_price: str
        :param hash: The hash of this Transaction.  # noqa: E501
        :type hash: str
        :param input: The input of this Transaction.  # noqa: E501
        :type input: str
        :param nonce: The nonce of this Transaction.  # noqa: E501
        :type nonce: str
        :param r: The r of this Transaction.  # noqa: E501
        :type r: str
        :param s: The s of this Transaction.  # noqa: E501
        :type s: str
        :param to: The to of this Transaction.  # noqa: E501
        :type to: str
        :param transaction_index: The transaction_index of this Transaction.  # noqa: E501
        :type transaction_index: int
        :param v: The v of this Transaction.  # noqa: E501
        :type v: str
        :param value: The value of this Transaction.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'block_hash': str,
            'block_number': int,
            '_from': str,
            'gas': str,
            'gas_price': str,
            'hash': str,
            'input': str,
            'nonce': str,
            'r': str,
            's': str,
            'to': str,
            'transaction_index': int,
            'v': str,
            'value': str
        }

        self.attribute_map = {
            'block_hash': 'blockHash',
            'block_number': 'blockNumber',
            '_from': 'from',
            'gas': 'gas',
            'gas_price': 'gasPrice',
            'hash': 'hash',
            'input': 'input',
            'nonce': 'nonce',
            'r': 'r',
            's': 's',
            'to': 'to',
            'transaction_index': 'transactionIndex',
            'v': 'v',
            'value': 'value'
        }

        self._block_hash = block_hash
        self._block_number = block_number
        self.__from = _from
        self._gas = gas
        self._gas_price = gas_price
        self._hash = hash
        self._input = input
        self._nonce = nonce
        self._r = r
        self._s = s
        self._to = to
        self._transaction_index = transaction_index
        self._v = v
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_hash(self) -> str:
        """Gets the block_hash of this Transaction.


        :return: The block_hash of this Transaction.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash: str):
        """Sets the block_hash of this Transaction.


        :param block_hash: The block_hash of this Transaction.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def block_number(self) -> int:
        """Gets the block_number of this Transaction.


        :return: The block_number of this Transaction.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this Transaction.


        :param block_number: The block_number of this Transaction.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def _from(self) -> str:
        """Gets the _from of this Transaction.


        :return: The _from of this Transaction.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Transaction.


        :param _from: The _from of this Transaction.
        :type _from: str
        """

        self.__from = _from

    @property
    def gas(self) -> str:
        """Gets the gas of this Transaction.


        :return: The gas of this Transaction.
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas: str):
        """Sets the gas of this Transaction.


        :param gas: The gas of this Transaction.
        :type gas: str
        """

        self._gas = gas

    @property
    def gas_price(self) -> str:
        """Gets the gas_price of this Transaction.


        :return: The gas_price of this Transaction.
        :rtype: str
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price: str):
        """Sets the gas_price of this Transaction.


        :param gas_price: The gas_price of this Transaction.
        :type gas_price: str
        """

        self._gas_price = gas_price

    @property
    def hash(self) -> str:
        """Gets the hash of this Transaction.


        :return: The hash of this Transaction.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash: str):
        """Sets the hash of this Transaction.


        :param hash: The hash of this Transaction.
        :type hash: str
        """

        self._hash = hash

    @property
    def input(self) -> str:
        """Gets the input of this Transaction.


        :return: The input of this Transaction.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input: str):
        """Sets the input of this Transaction.


        :param input: The input of this Transaction.
        :type input: str
        """

        self._input = input

    @property
    def nonce(self) -> str:
        """Gets the nonce of this Transaction.


        :return: The nonce of this Transaction.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce: str):
        """Sets the nonce of this Transaction.


        :param nonce: The nonce of this Transaction.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def r(self) -> str:
        """Gets the r of this Transaction.


        :return: The r of this Transaction.
        :rtype: str
        """
        return self._r

    @r.setter
    def r(self, r: str):
        """Sets the r of this Transaction.


        :param r: The r of this Transaction.
        :type r: str
        """

        self._r = r

    @property
    def s(self) -> str:
        """Gets the s of this Transaction.


        :return: The s of this Transaction.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s: str):
        """Sets the s of this Transaction.


        :param s: The s of this Transaction.
        :type s: str
        """

        self._s = s

    @property
    def to(self) -> str:
        """Gets the to of this Transaction.


        :return: The to of this Transaction.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Transaction.


        :param to: The to of this Transaction.
        :type to: str
        """

        self._to = to

    @property
    def transaction_index(self) -> int:
        """Gets the transaction_index of this Transaction.


        :return: The transaction_index of this Transaction.
        :rtype: int
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index: int):
        """Sets the transaction_index of this Transaction.


        :param transaction_index: The transaction_index of this Transaction.
        :type transaction_index: int
        """

        self._transaction_index = transaction_index

    @property
    def v(self) -> str:
        """Gets the v of this Transaction.


        :return: The v of this Transaction.
        :rtype: str
        """
        return self._v

    @v.setter
    def v(self, v: str):
        """Sets the v of this Transaction.


        :param v: The v of this Transaction.
        :type v: str
        """

        self._v = v

    @property
    def value(self) -> str:
        """Gets the value of this Transaction.


        :return: The value of this Transaction.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Transaction.


        :param value: The value of this Transaction.
        :type value: str
        """

        self._value = value
