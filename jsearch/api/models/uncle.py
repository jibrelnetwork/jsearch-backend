# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jsearch.api.models.base_model_ import Model
from jsearch.api import util


class Uncle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, difficulty: int=None, extra_data: str=None, gas_limit: int=None, gas_used: int=None, hash: str=None, logs_bloom: str=None, miner: str=None, mix_hash: str=None, nonce: str=None, number: int=None, parent_hash: str=None, receipts_root: str=None, sha3_uncles: str=None, size: int=None, state_root: str=None, timestamp: int=None, total_difficulty: int=None, transactions_root: str=None, block_number: int=None, reward: int=None):  # noqa: E501
        """Uncle - a model defined in Swagger

        :param difficulty: The difficulty of this Uncle.  # noqa: E501
        :type difficulty: int
        :param extra_data: The extra_data of this Uncle.  # noqa: E501
        :type extra_data: str
        :param gas_limit: The gas_limit of this Uncle.  # noqa: E501
        :type gas_limit: int
        :param gas_used: The gas_used of this Uncle.  # noqa: E501
        :type gas_used: int
        :param hash: The hash of this Uncle.  # noqa: E501
        :type hash: str
        :param logs_bloom: The logs_bloom of this Uncle.  # noqa: E501
        :type logs_bloom: str
        :param miner: The miner of this Uncle.  # noqa: E501
        :type miner: str
        :param mix_hash: The mix_hash of this Uncle.  # noqa: E501
        :type mix_hash: str
        :param nonce: The nonce of this Uncle.  # noqa: E501
        :type nonce: str
        :param number: The number of this Uncle.  # noqa: E501
        :type number: int
        :param parent_hash: The parent_hash of this Uncle.  # noqa: E501
        :type parent_hash: str
        :param receipts_root: The receipts_root of this Uncle.  # noqa: E501
        :type receipts_root: str
        :param sha3_uncles: The sha3_uncles of this Uncle.  # noqa: E501
        :type sha3_uncles: str
        :param size: The size of this Uncle.  # noqa: E501
        :type size: int
        :param state_root: The state_root of this Uncle.  # noqa: E501
        :type state_root: str
        :param timestamp: The timestamp of this Uncle.  # noqa: E501
        :type timestamp: int
        :param total_difficulty: The total_difficulty of this Uncle.  # noqa: E501
        :type total_difficulty: int
        :param transactions_root: The transactions_root of this Uncle.  # noqa: E501
        :type transactions_root: str
        :param block_number: The block_number of this Uncle.  # noqa: E501
        :type block_number: int
        :param reward: The reward of this Uncle.  # noqa: E501
        :type reward: int
        """
        self.swagger_types = {
            'difficulty': int,
            'extra_data': str,
            'gas_limit': int,
            'gas_used': int,
            'hash': str,
            'logs_bloom': str,
            'miner': str,
            'mix_hash': str,
            'nonce': str,
            'number': int,
            'parent_hash': str,
            'receipts_root': str,
            'sha3_uncles': str,
            'size': int,
            'state_root': str,
            'timestamp': int,
            'total_difficulty': int,
            'transactions_root': str,
            'block_number': int,
            'reward': int
        }

        self.attribute_map = {
            'difficulty': 'difficulty',
            'extra_data': 'extraData',
            'gas_limit': 'gasLimit',
            'gas_used': 'gasUsed',
            'hash': 'hash',
            'logs_bloom': 'logsBloom',
            'miner': 'miner',
            'mix_hash': 'mixHash',
            'nonce': 'nonce',
            'number': 'number',
            'parent_hash': 'parentHash',
            'receipts_root': 'receiptsRoot',
            'sha3_uncles': 'sha3Uncles',
            'size': 'size',
            'state_root': 'stateRoot',
            'timestamp': 'timestamp',
            'total_difficulty': 'totalDifficulty',
            'transactions_root': 'transactionsRoot',
            'block_number': 'blockNumber',
            'reward': 'reward'
        }

        self._difficulty = difficulty
        self._extra_data = extra_data
        self._gas_limit = gas_limit
        self._gas_used = gas_used
        self._hash = hash
        self._logs_bloom = logs_bloom
        self._miner = miner
        self._mix_hash = mix_hash
        self._nonce = nonce
        self._number = number
        self._parent_hash = parent_hash
        self._receipts_root = receipts_root
        self._sha3_uncles = sha3_uncles
        self._size = size
        self._state_root = state_root
        self._timestamp = timestamp
        self._total_difficulty = total_difficulty
        self._transactions_root = transactions_root
        self._block_number = block_number
        self._reward = reward

    @classmethod
    def from_dict(cls, dikt) -> 'Uncle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Uncle of this Uncle.  # noqa: E501
        :rtype: Uncle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def difficulty(self) -> int:
        """Gets the difficulty of this Uncle.


        :return: The difficulty of this Uncle.
        :rtype: int
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty: int):
        """Sets the difficulty of this Uncle.


        :param difficulty: The difficulty of this Uncle.
        :type difficulty: int
        """

        self._difficulty = difficulty

    @property
    def extra_data(self) -> str:
        """Gets the extra_data of this Uncle.


        :return: The extra_data of this Uncle.
        :rtype: str
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data: str):
        """Sets the extra_data of this Uncle.


        :param extra_data: The extra_data of this Uncle.
        :type extra_data: str
        """

        self._extra_data = extra_data

    @property
    def gas_limit(self) -> int:
        """Gets the gas_limit of this Uncle.


        :return: The gas_limit of this Uncle.
        :rtype: int
        """
        return self._gas_limit

    @gas_limit.setter
    def gas_limit(self, gas_limit: int):
        """Sets the gas_limit of this Uncle.


        :param gas_limit: The gas_limit of this Uncle.
        :type gas_limit: int
        """

        self._gas_limit = gas_limit

    @property
    def gas_used(self) -> int:
        """Gets the gas_used of this Uncle.


        :return: The gas_used of this Uncle.
        :rtype: int
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used: int):
        """Sets the gas_used of this Uncle.


        :param gas_used: The gas_used of this Uncle.
        :type gas_used: int
        """

        self._gas_used = gas_used

    @property
    def hash(self) -> str:
        """Gets the hash of this Uncle.


        :return: The hash of this Uncle.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash: str):
        """Sets the hash of this Uncle.


        :param hash: The hash of this Uncle.
        :type hash: str
        """

        self._hash = hash

    @property
    def logs_bloom(self) -> str:
        """Gets the logs_bloom of this Uncle.


        :return: The logs_bloom of this Uncle.
        :rtype: str
        """
        return self._logs_bloom

    @logs_bloom.setter
    def logs_bloom(self, logs_bloom: str):
        """Sets the logs_bloom of this Uncle.


        :param logs_bloom: The logs_bloom of this Uncle.
        :type logs_bloom: str
        """

        self._logs_bloom = logs_bloom

    @property
    def miner(self) -> str:
        """Gets the miner of this Uncle.


        :return: The miner of this Uncle.
        :rtype: str
        """
        return self._miner

    @miner.setter
    def miner(self, miner: str):
        """Sets the miner of this Uncle.


        :param miner: The miner of this Uncle.
        :type miner: str
        """

        self._miner = miner

    @property
    def mix_hash(self) -> str:
        """Gets the mix_hash of this Uncle.


        :return: The mix_hash of this Uncle.
        :rtype: str
        """
        return self._mix_hash

    @mix_hash.setter
    def mix_hash(self, mix_hash: str):
        """Sets the mix_hash of this Uncle.


        :param mix_hash: The mix_hash of this Uncle.
        :type mix_hash: str
        """

        self._mix_hash = mix_hash

    @property
    def nonce(self) -> str:
        """Gets the nonce of this Uncle.


        :return: The nonce of this Uncle.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce: str):
        """Sets the nonce of this Uncle.


        :param nonce: The nonce of this Uncle.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def number(self) -> int:
        """Gets the number of this Uncle.


        :return: The number of this Uncle.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this Uncle.


        :param number: The number of this Uncle.
        :type number: int
        """

        self._number = number

    @property
    def parent_hash(self) -> str:
        """Gets the parent_hash of this Uncle.


        :return: The parent_hash of this Uncle.
        :rtype: str
        """
        return self._parent_hash

    @parent_hash.setter
    def parent_hash(self, parent_hash: str):
        """Sets the parent_hash of this Uncle.


        :param parent_hash: The parent_hash of this Uncle.
        :type parent_hash: str
        """

        self._parent_hash = parent_hash

    @property
    def receipts_root(self) -> str:
        """Gets the receipts_root of this Uncle.


        :return: The receipts_root of this Uncle.
        :rtype: str
        """
        return self._receipts_root

    @receipts_root.setter
    def receipts_root(self, receipts_root: str):
        """Sets the receipts_root of this Uncle.


        :param receipts_root: The receipts_root of this Uncle.
        :type receipts_root: str
        """

        self._receipts_root = receipts_root

    @property
    def sha3_uncles(self) -> str:
        """Gets the sha3_uncles of this Uncle.


        :return: The sha3_uncles of this Uncle.
        :rtype: str
        """
        return self._sha3_uncles

    @sha3_uncles.setter
    def sha3_uncles(self, sha3_uncles: str):
        """Sets the sha3_uncles of this Uncle.


        :param sha3_uncles: The sha3_uncles of this Uncle.
        :type sha3_uncles: str
        """

        self._sha3_uncles = sha3_uncles

    @property
    def size(self) -> int:
        """Gets the size of this Uncle.


        :return: The size of this Uncle.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Uncle.


        :param size: The size of this Uncle.
        :type size: int
        """

        self._size = size

    @property
    def state_root(self) -> str:
        """Gets the state_root of this Uncle.


        :return: The state_root of this Uncle.
        :rtype: str
        """
        return self._state_root

    @state_root.setter
    def state_root(self, state_root: str):
        """Sets the state_root of this Uncle.


        :param state_root: The state_root of this Uncle.
        :type state_root: str
        """

        self._state_root = state_root

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Uncle.


        :return: The timestamp of this Uncle.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Uncle.


        :param timestamp: The timestamp of this Uncle.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def total_difficulty(self) -> int:
        """Gets the total_difficulty of this Uncle.


        :return: The total_difficulty of this Uncle.
        :rtype: int
        """
        return self._total_difficulty

    @total_difficulty.setter
    def total_difficulty(self, total_difficulty: int):
        """Sets the total_difficulty of this Uncle.


        :param total_difficulty: The total_difficulty of this Uncle.
        :type total_difficulty: int
        """

        self._total_difficulty = total_difficulty

    @property
    def transactions_root(self) -> str:
        """Gets the transactions_root of this Uncle.


        :return: The transactions_root of this Uncle.
        :rtype: str
        """
        return self._transactions_root

    @transactions_root.setter
    def transactions_root(self, transactions_root: str):
        """Sets the transactions_root of this Uncle.


        :param transactions_root: The transactions_root of this Uncle.
        :type transactions_root: str
        """

        self._transactions_root = transactions_root

    @property
    def block_number(self) -> int:
        """Gets the block_number of this Uncle.


        :return: The block_number of this Uncle.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this Uncle.


        :param block_number: The block_number of this Uncle.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def reward(self) -> int:
        """Gets the reward of this Uncle.


        :return: The reward of this Uncle.
        :rtype: int
        """
        return self._reward

    @reward.setter
    def reward(self, reward: int):
        """Sets the reward of this Uncle.


        :param reward: The reward of this Uncle.
        :type reward: int
        """

        self._reward = reward
