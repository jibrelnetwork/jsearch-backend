# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jsearch.api.models.base_model_ import Model
from jsearch.api import util


class Log(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, block_hash: str=None, block_number: int=None, data: str=None, log_index: int=None, removed: str=None, topics: List[str]=None, transaction_hash: str=None, transaction_index: int=None):  # noqa: E501
        """Log - a model defined in Swagger

        :param address: The address of this Log.  # noqa: E501
        :type address: str
        :param block_hash: The block_hash of this Log.  # noqa: E501
        :type block_hash: str
        :param block_number: The block_number of this Log.  # noqa: E501
        :type block_number: int
        :param data: The data of this Log.  # noqa: E501
        :type data: str
        :param log_index: The log_index of this Log.  # noqa: E501
        :type log_index: int
        :param removed: The removed of this Log.  # noqa: E501
        :type removed: str
        :param topics: The topics of this Log.  # noqa: E501
        :type topics: List[str]
        :param transaction_hash: The transaction_hash of this Log.  # noqa: E501
        :type transaction_hash: str
        :param transaction_index: The transaction_index of this Log.  # noqa: E501
        :type transaction_index: int
        """
        self.swagger_types = {
            'address': str,
            'block_hash': str,
            'block_number': int,
            'data': str,
            'log_index': int,
            'removed': str,
            'topics': List[str],
            'transaction_hash': str,
            'transaction_index': int
        }

        self.attribute_map = {
            'address': 'address',
            'block_hash': 'blockHash',
            'block_number': 'blockNumber',
            'data': 'data',
            'log_index': 'logIndex',
            'removed': 'removed',
            'topics': 'topics',
            'transaction_hash': 'transactionHash',
            'transaction_index': 'transactionIndex'
        }

        self._address = address
        self._block_hash = block_hash
        self._block_number = block_number
        self._data = data
        self._log_index = log_index
        self._removed = removed
        self._topics = topics
        self._transaction_hash = transaction_hash
        self._transaction_index = transaction_index

    @classmethod
    def from_dict(cls, dikt) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Log of this Log.  # noqa: E501
        :rtype: Log
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this Log.


        :return: The address of this Log.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Log.


        :param address: The address of this Log.
        :type address: str
        """

        self._address = address

    @property
    def block_hash(self) -> str:
        """Gets the block_hash of this Log.


        :return: The block_hash of this Log.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash: str):
        """Sets the block_hash of this Log.


        :param block_hash: The block_hash of this Log.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def block_number(self) -> int:
        """Gets the block_number of this Log.


        :return: The block_number of this Log.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this Log.


        :param block_number: The block_number of this Log.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def data(self) -> str:
        """Gets the data of this Log.


        :return: The data of this Log.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this Log.


        :param data: The data of this Log.
        :type data: str
        """

        self._data = data

    @property
    def log_index(self) -> int:
        """Gets the log_index of this Log.


        :return: The log_index of this Log.
        :rtype: int
        """
        return self._log_index

    @log_index.setter
    def log_index(self, log_index: int):
        """Sets the log_index of this Log.


        :param log_index: The log_index of this Log.
        :type log_index: int
        """

        self._log_index = log_index

    @property
    def removed(self) -> str:
        """Gets the removed of this Log.


        :return: The removed of this Log.
        :rtype: str
        """
        return self._removed

    @removed.setter
    def removed(self, removed: str):
        """Sets the removed of this Log.


        :param removed: The removed of this Log.
        :type removed: str
        """

        self._removed = removed

    @property
    def topics(self) -> List[str]:
        """Gets the topics of this Log.


        :return: The topics of this Log.
        :rtype: List[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics: List[str]):
        """Sets the topics of this Log.


        :param topics: The topics of this Log.
        :type topics: List[str]
        """

        self._topics = topics

    @property
    def transaction_hash(self) -> str:
        """Gets the transaction_hash of this Log.


        :return: The transaction_hash of this Log.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash: str):
        """Sets the transaction_hash of this Log.


        :param transaction_hash: The transaction_hash of this Log.
        :type transaction_hash: str
        """

        self._transaction_hash = transaction_hash

    @property
    def transaction_index(self) -> int:
        """Gets the transaction_index of this Log.


        :return: The transaction_index of this Log.
        :rtype: int
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index: int):
        """Sets the transaction_index of this Log.


        :param transaction_index: The transaction_index of this Log.
        :type transaction_index: int
        """

        self._transaction_index = transaction_index
