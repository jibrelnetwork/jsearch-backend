# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jsearch.api.models.base_model_ import Model
from jsearch.api import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, block_number: int=None, block_hash: str=None, address: str=None, nonce: int=None, code: str=None, code_hash: str=None, balance: int=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param block_number: The block_number of this Account.  # noqa: E501
        :type block_number: int
        :param block_hash: The block_hash of this Account.  # noqa: E501
        :type block_hash: str
        :param address: The address of this Account.  # noqa: E501
        :type address: str
        :param nonce: The nonce of this Account.  # noqa: E501
        :type nonce: int
        :param code: The code of this Account.  # noqa: E501
        :type code: str
        :param code_hash: The code_hash of this Account.  # noqa: E501
        :type code_hash: str
        :param balance: The balance of this Account.  # noqa: E501
        :type balance: int
        """
        self.swagger_types = {
            'block_number': int,
            'block_hash': str,
            'address': str,
            'nonce': int,
            'code': str,
            'code_hash': str,
            'balance': int
        }

        self.attribute_map = {
            'block_number': 'blockNumber',
            'block_hash': 'blockHash',
            'address': 'address',
            'nonce': 'nonce',
            'code': 'code',
            'code_hash': 'codeHash',
            'balance': 'balance'
        }

        self._block_number = block_number
        self._block_hash = block_hash
        self._address = address
        self._nonce = nonce
        self._code = code
        self._code_hash = code_hash
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_number(self) -> int:
        """Gets the block_number of this Account.


        :return: The block_number of this Account.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this Account.


        :param block_number: The block_number of this Account.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def block_hash(self) -> str:
        """Gets the block_hash of this Account.


        :return: The block_hash of this Account.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash: str):
        """Sets the block_hash of this Account.


        :param block_hash: The block_hash of this Account.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def address(self) -> str:
        """Gets the address of this Account.


        :return: The address of this Account.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Account.


        :param address: The address of this Account.
        :type address: str
        """

        self._address = address

    @property
    def nonce(self) -> int:
        """Gets the nonce of this Account.


        :return: The nonce of this Account.
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce: int):
        """Sets the nonce of this Account.


        :param nonce: The nonce of this Account.
        :type nonce: int
        """

        self._nonce = nonce

    @property
    def code(self) -> str:
        """Gets the code of this Account.


        :return: The code of this Account.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Account.


        :param code: The code of this Account.
        :type code: str
        """

        self._code = code

    @property
    def code_hash(self) -> str:
        """Gets the code_hash of this Account.


        :return: The code_hash of this Account.
        :rtype: str
        """
        return self._code_hash

    @code_hash.setter
    def code_hash(self, code_hash: str):
        """Sets the code_hash of this Account.


        :param code_hash: The code_hash of this Account.
        :type code_hash: str
        """

        self._code_hash = code_hash

    @property
    def balance(self) -> int:
        """Gets the balance of this Account.


        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance: int):
        """Sets the balance of this Account.


        :param balance: The balance of this Account.
        :type balance: int
        """

        self._balance = balance
