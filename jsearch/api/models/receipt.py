# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jsearch.api.models.base_model_ import Model
from jsearch.api.models.log import Log  # noqa: F401,E501
from jsearch.api import util


class Receipt(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, block_hash: str=None, block_number: int=None, contract_address: str=None, cumulative_gas_used: int=None, _from: str=None, gas_used: int=None, logs: List[Log]=None, logs_bloom: str=None, root: str=None, to: str=None, transaction_hash: str=None, transaction_index: int=None, status: int=None):  # noqa: E501
        """Receipt - a model defined in Swagger

        :param block_hash: The block_hash of this Receipt.  # noqa: E501
        :type block_hash: str
        :param block_number: The block_number of this Receipt.  # noqa: E501
        :type block_number: int
        :param contract_address: The contract_address of this Receipt.  # noqa: E501
        :type contract_address: str
        :param cumulative_gas_used: The cumulative_gas_used of this Receipt.  # noqa: E501
        :type cumulative_gas_used: int
        :param _from: The _from of this Receipt.  # noqa: E501
        :type _from: str
        :param gas_used: The gas_used of this Receipt.  # noqa: E501
        :type gas_used: int
        :param logs: The logs of this Receipt.  # noqa: E501
        :type logs: List[Log]
        :param logs_bloom: The logs_bloom of this Receipt.  # noqa: E501
        :type logs_bloom: str
        :param root: The root of this Receipt.  # noqa: E501
        :type root: str
        :param to: The to of this Receipt.  # noqa: E501
        :type to: str
        :param transaction_hash: The transaction_hash of this Receipt.  # noqa: E501
        :type transaction_hash: str
        :param transaction_index: The transaction_index of this Receipt.  # noqa: E501
        :type transaction_index: int
        """
        self.swagger_types = {
            'block_hash': str,
            'block_number': int,
            'contract_address': str,
            'cumulative_gas_used': int,
            '_from': str,
            'gas_used': int,
            'logs': List[Log],
            'logs_bloom': str,
            'root': str,
            'to': str,
            'transaction_hash': str,
            'transaction_index': int,
            'status': int
        }

        self.attribute_map = {
            'block_hash': 'blockHash',
            'block_number': 'blockNumber',
            'contract_address': 'contractAddress',
            'cumulative_gas_used': 'cumulativeGasUsed',
            '_from': 'from',
            'gas_used': 'gasUsed',
            'logs': 'logs',
            'logs_bloom': 'logsBloom',
            'root': 'root',
            'to': 'to',
            'transaction_hash': 'transactionHash',
            'transaction_index': 'transactionIndex',
            'status': 'status'
        }

        self._block_hash = block_hash
        self._block_number = block_number
        self._contract_address = contract_address
        self._cumulative_gas_used = cumulative_gas_used
        self.__from = _from
        self._gas_used = gas_used
        self._logs = logs
        self._logs_bloom = logs_bloom
        self._root = root
        self._to = to
        self._transaction_hash = transaction_hash
        self._transaction_index = transaction_index
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Receipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Receipt of this Receipt.  # noqa: E501
        :rtype: Receipt
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_hash(self) -> str:
        """Gets the block_hash of this Receipt.


        :return: The block_hash of this Receipt.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash: str):
        """Sets the block_hash of this Receipt.


        :param block_hash: The block_hash of this Receipt.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def block_number(self) -> int:
        """Gets the block_number of this Receipt.


        :return: The block_number of this Receipt.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this Receipt.


        :param block_number: The block_number of this Receipt.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def contract_address(self) -> str:
        """Gets the contract_address of this Receipt.


        :return: The contract_address of this Receipt.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address: str):
        """Sets the contract_address of this Receipt.


        :param contract_address: The contract_address of this Receipt.
        :type contract_address: str
        """

        self._contract_address = contract_address

    @property
    def cumulative_gas_used(self) -> int:
        """Gets the cumulative_gas_used of this Receipt.


        :return: The cumulative_gas_used of this Receipt.
        :rtype: int
        """
        return self._cumulative_gas_used

    @cumulative_gas_used.setter
    def cumulative_gas_used(self, cumulative_gas_used: int):
        """Sets the cumulative_gas_used of this Receipt.


        :param cumulative_gas_used: The cumulative_gas_used of this Receipt.
        :type cumulative_gas_used: int
        """

        self._cumulative_gas_used = cumulative_gas_used

    @property
    def _from(self) -> str:
        """Gets the _from of this Receipt.


        :return: The _from of this Receipt.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Receipt.


        :param _from: The _from of this Receipt.
        :type _from: str
        """

        self.__from = _from

    @property
    def gas_used(self) -> int:
        """Gets the gas_used of this Receipt.


        :return: The gas_used of this Receipt.
        :rtype: int
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used: int):
        """Sets the gas_used of this Receipt.


        :param gas_used: The gas_used of this Receipt.
        :type gas_used: int
        """

        self._gas_used = gas_used

    @property
    def logs(self) -> List[Log]:
        """Gets the logs of this Receipt.


        :return: The logs of this Receipt.
        :rtype: List[Log]
        """
        return self._logs

    @logs.setter
    def logs(self, logs: List[Log]):
        """Sets the logs of this Receipt.


        :param logs: The logs of this Receipt.
        :type logs: List[Log]
        """

        self._logs = logs

    @property
    def logs_bloom(self) -> str:
        """Gets the logs_bloom of this Receipt.


        :return: The logs_bloom of this Receipt.
        :rtype: str
        """
        return self._logs_bloom

    @logs_bloom.setter
    def logs_bloom(self, logs_bloom: str):
        """Sets the logs_bloom of this Receipt.


        :param logs_bloom: The logs_bloom of this Receipt.
        :type logs_bloom: str
        """

        self._logs_bloom = logs_bloom

    @property
    def root(self) -> str:
        """Gets the root of this Receipt.


        :return: The root of this Receipt.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root: str):
        """Sets the root of this Receipt.


        :param root: The root of this Receipt.
        :type root: str
        """

        self._root = root

    @property
    def to(self) -> str:
        """Gets the to of this Receipt.


        :return: The to of this Receipt.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Receipt.


        :param to: The to of this Receipt.
        :type to: str
        """

        self._to = to

    @property
    def transaction_hash(self) -> str:
        """Gets the transaction_hash of this Receipt.


        :return: The transaction_hash of this Receipt.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash: str):
        """Sets the transaction_hash of this Receipt.


        :param transaction_hash: The transaction_hash of this Receipt.
        :type transaction_hash: str
        """

        self._transaction_hash = transaction_hash

    @property
    def transaction_index(self) -> int:
        """Gets the transaction_index of this Receipt.


        :return: The transaction_index of this Receipt.
        :rtype: int
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index: int):
        """Sets the transaction_index of this Receipt.


        :param transaction_index: The transaction_index of this Receipt.
        :type transaction_index: int
        """

        self._transaction_index = transaction_index

    @property
    def status(self) -> int:
        """Gets the status of this Receipt.


        :return: The status of this Receipt.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Receipt.


        :param status: The status of this Receipt.
        :type status: int
        """

        self._status = status
