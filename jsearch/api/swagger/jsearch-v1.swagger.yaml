openapi: 3.0.1
info:
  title: Jsearch API
  description: |
    Jsearch - Ethereum Blockchain Explorer API

    # Common information

    ## Requests and Responses

    Response body of any call can be is an empty string or JSON object, like:

    Successful case
    ```
    {
      'status': {
        'success': true,
        'errors': [],
      }
      "data": [...],
      "meta": {...},
      "paging": {...}
    }
    ```
    Error case
    ```
    {
        "status": {
            "success": false,
            "errors": [
                ...
            ],
        }
    }
    ```
    **note**: `paging` and `meta` objects are optional and can be omitted in response.

    ## API errors

    - All 400 series errors will be returned with a JSON object including an array of errors in the body and a application/json content type.
    ```
    {
        "status": {
            "success": false,
            "errors": [
                {
                  "field": "SOME_FIELD_NAME",
                  "code": "SOME_ERR_TEXT_CODE",
                  "message": "some err text"
                }
            ],
        }
    }
    ```

    **note**: `status.success` is just a human-readable way of obtaining the result of a response. There could be no cases when 400 series error is returned and `status.success` equals `true` and vice versa. In other words, HTTP Status Code is duplicated like this: `status.success = (code === 200)`.

    - 500 series error codes do not return JSON bodies.


    ## Traversing Paged Results

    When making an API request, you usually don't receive all of the results of that request in a single response. This is because some responses could contain thousands of objects so most responses are paginated by default.

    This API implements Cursor-based pagination is the most efficient method of paging.

    When reading a response, you see the following JSON response:
    ```
    {
      "status": {...},
      "data": [...],
      "meta": {...},
      "paging": {
        "link": "/v1/...",
        "link_kwargs": {
          "order": "asc",
          "limit": 20
        }
        "next": "/v1/...",
        "next_kwargs": {
          "order": "asc",
          "limit": 20
        }
      }
    }
    ```

    - **next** : The API endpoint that will return the next page of data. If not included or is null, this is the last page of data.
    - **current** : The API endpoint that will return the current page of data.
  contact:
    email: dev@jibrel.network
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
- url: /
tags:
- name: common
- name: proxy
- name: wallet
paths:
  /v1/accounts/balances:
    get:
      tags:
      - common
      summary: Get Ether Balance of multiple accounts in a single call.
      description: |
        You can use this endoint to receive `Ether Balance` of single or multiple accounts on the specified block hash or on the latest known block in a single call.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getBalancesForMultiAddresses
      parameters:
      - $ref: '#/components/parameters/addresses'
      - $ref: '#/components/parameters/blockchain_tip'
      responses:
        '200':
          description: List of Ether Balances
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Balance'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
              examples:
                regular:
                  $ref: '#/components/examples/AccountsBalancesResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}:
    get:
      tags:
      - common
      summary: Get Account State by address
      description: |
        You can use this endpoint to receive `Account State` data on the specified block number or hash or on the latest known block by address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccount
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/tagOptional'
      - $ref: '#/components/parameters/blockchain_tip'
      responses:
        '200':
          description: Account object
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        $ref: '#/components/schemas/Account'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
              examples:
                regular:
                  $ref: '#/components/examples/AccountResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/accounts/{address}/logs:
    get:
      tags:
      - common
      summary: Get a list of `Contract Logs` by address
      description: |
        You can use this endpoint to receive a list of `Contract Logs` on the specified block hash or on the latest known block by address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getLogs
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/transaction_index'
      - $ref: '#/components/parameters/log_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: logs
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Log'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/AccountLogsResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/transactions:
    get:
      tags:
      - common
      summary: Get a list of `Normal` Transactions by Account address
      description: |
        You can use this endpoint to receive a list of `Normal` Transactions on the specified block hash or on the latest known block by address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountTransactions
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/transaction_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: transactions for specific address
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transaction'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/AccountTransactionsResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/internal_transactions:
    get:
      tags:
      - common
      summary: Get a list of `Internal` Transactions by Account address
      description: |
        You can use this endpoint to receive a list of `Internal` Transactions on the specified block hash or on the latest known block by address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountInternalTransactions
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/transaction_index'
      - $ref: '#/components/parameters/parent_transaction_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: internal transactions for specific address
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/InternalTransaction'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/AccountInternalTransactionsResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/pending_transactions:
    get:
      tags:
      - common
      summary: Get a list of `Pending` Transactions by Account address
      description: |
        You can use this endpoint to receive a list of `Pending` Transactions by address.
      operationId: getAccountPendingTransactions
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: pending transactions for specific address
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PendingTransaction'
                  paging:
                    $ref: '#/components/schemas/Paging'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/mined_blocks:
    get:
      tags:
      - common
      summary: Get list of `Blocks Mined` by Account address
      description: |
        You can use this endpoint to receive a list of `Blocks Mined` on the specified block hash or on the latest known block by Account address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountMinedBlocks
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: blocks mined by specific address
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Block'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/BlocksResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/mined_uncles:
    get:
      tags:
      - common
      summary: Get list of `Uncles Mined` by Account address
      description: |
        You can use this endpoint to receive a list of `Uncles Mined` on the specified block hash or on the latest known block by Account address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountMinedUncles
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/uncle_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: uncles mined by specific address
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Uncle'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/UnclesResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/token_balances:
    get:
      tags:
      - common
      summary: Get Token Balance for multiple contract addresses for specific Account
        address in a single call.
      description: |
        You can use this endpoint to receive a list of `Token Balances` for single or multiple contract addresses on the specified block hash or on the latest known block and account address in a single call.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getTokenBalancesForMultiContracts
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/contract_addresses'
      - $ref: '#/components/parameters/blockchain_tip'
      responses:
        '200':
          description: List of Token balances
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenBalance'
                  meta:
                    $ref: '#/components/schemas/BlockchainTipInfo'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/token_balance/{contract_address}:
    get:
      tags:
      - common
      summary: Get Token Balance for specific token by Account address
      description: |
        You can use this endpoint to receive `Token Balance` for specific token by Account address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getTokenHolderBalance
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/contract_address'
      - $ref: '#/components/parameters/blockchain_tip'
      responses:
        '200':
          description: token holders balance
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        $ref: '#/components/schemas/TokenBalance'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
              examples:
                regular:
                  $ref: '#/components/examples/AccountTokenBalanceResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holder not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/accounts/{address}/token_transfers:
    get:
      tags:
      - common
      summary: Get a list of `ERC20 Token Transfers` by Account address
      description: |
        You can use this endpoint to receive a list of `ERC20 Token Transfers` on the specified block hash or on the latest known block by Account address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountTokenTransfers
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/transaction_index'
      - $ref: '#/components/parameters/log_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: tokens transfered to or from specific address
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TokenTransfer'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/TokenTransfersResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/transaction_count:
    get:
      tags:
      - common
      summary: Returns the number of transactions sent from an address.
      description: |
        You can use this endpoint to get the number of transactions sent from an address.
      operationId: getAccountTransactionCount
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/include_pending_txs'
      responses:
        '200':
          description: nonce
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: integer
                    format: dec
                    example: 1
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{address}/eth_transfers:
    get:
      tags:
      - common
      summary: Get a list of `ETH Transfers` by Account address
      description: |
        You can use this endpoint to receive a list of `ETH Transfers` on the specified block hash or on the latest known block by Account address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getAccountEthTransfers
      parameters:
      - $ref: '#/components/parameters/address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/event_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Eth transfered to or from specific address
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EthTransfer'
                  meta:
                    $ref: '#/components/schemas/BlockchainTipInfo'
                  paging:
                    $ref: '#/components/schemas/Paging'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/blocks:
    get:
      tags:
      - common
      summary: Get a list of `Blocks`
      description: |
        You can use this endpoint to receive a list of `Blocks` on the specified block hash or on the latest known block.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getBlockList
      parameters:
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: blocks list
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Block'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/BlocksResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/blocks/{tag}:
    get:
      tags:
      - common
      summary: Get block by hash or number or keyword
      description: |
        You can use this endpoint to receive `Block` data by block hash or number or keyword
      operationId: getBlock
      parameters:
      - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: block
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Block'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/blocks/{tag}/transactions:
    get:
      tags:
      - common
      summary: Get a list of `Normal Transactions` by specific Block
      description: |
        You can use this endpoint to receive a list of `Normal Transactions` by block hash or number or keyword
      operationId: getBlockTransactions
      parameters:
      - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: transactions from specific block
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/blocks/{tag}/internal_transactions:
    get:
      tags:
      - common
      summary: Get a list of `Internal Transactions` by specific Block
      description: |
        You can use this endpoint to receive a list of `Internal Transactions` by block hash or number or keyword
      operationId: getBlockInternalTransactions
      parameters:
      - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: transactions from specific block
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InternalTransaction'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/blocks/{tag}/uncles:
    get:
      tags:
      - common
      summary: Get a list of Uncles by specific Block
      description: |
        You can use this endpoint to receive a list of `Uncles` by block hash or number or keyword
      operationId: getBlockUncles
      parameters:
      - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: uncles for specific block
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Uncle'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/transactions/{txhash}:
    get:
      tags:
      - common
      summary: Get Transaction by hash
      description: |
        You can use this endpoint to receive `Transaction` data by hash
      operationId: getTransaction
      parameters:
      - $ref: '#/components/parameters/txhash'
      responses:
        '200':
          description: transaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Transaction'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/transactions/{txhash}/internal_transactions:
    get:
      tags:
      - common
      summary: Get a list of `Internal` Transactions by transaction hash
      description: |
        You can use this endpoint to receive a list of `Internal Transactions` by transaction hash
      operationId: getInternalTransaction
      parameters:
      - $ref: '#/components/parameters/txhash'
      responses:
        '200':
          description: transaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InternalTransaction'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/receipts/{txhash}:
    get:
      tags:
      - common
      summary: Get Receipt by transaction hash
      description: |
        You can use this endpoint to receive `Receipt` data by transaction hash
      operationId: getReceipt
      parameters:
      - $ref: '#/components/parameters/txhash'
      responses:
        '200':
          description: transaction receipt
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Receipt'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/uncles:
    get:
      tags:
      - common
      summary: Get a list of Uncles
      description: |
        You can use this endpoint to receive a list of `Uncles` on the specified block hash or on the latest known block.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getUnclesList
      parameters:
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/uncle_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: uncles list
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Uncle'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/UnclesResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/uncles/{tag}:
    get:
      tags:
      - common
      summary: Get Uncle by hash or number or keyword
      description: |
        You can use this endpoint to receive `Uncle` data by uncle hash or number or keyword
      operationId: getUncle
      parameters:
      - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: uncle
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Uncle'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/verified_contracts:
    get:
      tags:
      - common
      summary: Get a list of `Verified Contracts`
      description: |
        You can use this endpoint to receive a list of `Verified Contracts`
      operationId: getVerifiedContractsList
      parameters:
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contract'
                  paging:
                    $ref: '#/components/schemas/Paging'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/verified_contracts/{contract_address}:
    get:
      tags:
      - common
      summary: Get Verified Contract info.
      description: |
        You can use this endpoint to receive `Verified Contract` info
      operationId: getVerifiedContract
      parameters:
      - $ref: '#/components/parameters/contract_address'
      responses:
        '200':
          description: Contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Contract'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Contract not found
          content: {}
  /v1/tokens:
    get:
      tags:
      - common
      summary: Get ERC20 tokens list
      description: |
        You can use this endpoint to receive a list of `ERC20 tokens`
      operationId: getTokensList
      parameters:
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Token'
                  paging:
                    $ref: '#/components/schemas/Paging'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tokens/{contract_address}:
    get:
      tags:
      - common
      summary: Get token info
      description: |
        You can use this endpoint to receive `ERC20 Token` info
      operationId: getToken
      parameters:
      - $ref: '#/components/parameters/contract_address'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/Token'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  errors:
                  - code: NOT_FOUND
                    message: Resource not found
  /v1/tokens/{contract_address}/transfers:
    get:
      tags:
      - common
      summary: Get a list of `Token Transfers` for specific token (contract) address
      description: |
        You can use this endpoint to receive a list of `Token Transfers` on the specified block hash or on the latest known block by token address.
         If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getTokenTransfers
      parameters:
      - $ref: '#/components/parameters/contract_address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/transaction_index'
      - $ref: '#/components/parameters/log_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: token transfers
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TokenTransfer'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/TokenTransfersResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tokens/{contract_address}/holders:
    get:
      tags:
      - common
      summary: Get a list of `Token Holders` for specific token
      description: |
        You can use this endpoint to receive a list of `Token Holders` on the specified block hash or on the latest known block by token address.
        If `blockchain_tip` is set then response includes a meta object containing currentBlockchainTip and blockchainTipStatus info.
      operationId: getTokenHolders
      parameters:
      - $ref: '#/components/parameters/contract_address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: token holders list
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TokenHolder'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/TokenHoldersResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/proxy/gas_price:
    get:
      tags:
      - proxy
      summary: Returns the current price per gas in wei.
      description: |
        You can use this endpoint to get the current gas price.
      responses:
        '200':
          description: get gas price
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: dec
                    example: "10000000000000"
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/proxy/transaction_count:
    post:
      tags:
      - proxy
      summary: Returns the number of transactions sent from an address.
      description: |
        You can use this endpoint to get the number of transactions sent from an address.

        Parameters

        1. DATA, 20 Bytes - address.
        2. QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example: ["0xf8b483dba2c3b7176a3da549ad41a48bb3121069", "latest"]
              items:
                type: string
        required: true
      responses:
        '200':
          description: nonce
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: dec
                    example: "1"
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /v1/proxy/estimate_gas:
    post:
      tags:
      - proxy
      summary: Generates and returns an estimate of how much gas is necessary to allow
        the transaction to complete.
      description: |
        You can use this endpoint to get an estimate of how much gas is necessary to allow the transaction to complete.

        Parameters

        1. Object - The transaction call object
        from - (optional, DATA, 20 Bytes) The address the transaction is sent from.
        to - (DATA, 20 Bytes) The address the transaction is directed to.
        gas - (optional, QUANTITY) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.
        gasPrice - (optional, QUANTITY) Integer of the gasPrice used for each paid gas
        value - (optional, QUANTITY) Integer of the value sent with this transaction
        data -DATA - (optional, DATA) Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI

        2. QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block parameter
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Call'
        required: true
      responses:
        '200':
          description: QUANTITY - the amount of gas used.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: dec
                    example: "21000"
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /v1/proxy/call_contract:
    post:
      tags:
      - proxy
      summary: Executes a new message call immediately without creating a transaction
        on the block chain.
      description: |
        You can use this endpoint to execute a new message call immediately without creating a transaction on the block chain.

        Parameters

        1. Object - The transaction call object
        from - (optional, DATA, 20 Bytes) The address the transaction is sent from.
        to - (DATA, 20 Bytes) The address the transaction is directed to.
        gas - (optional, QUANTITY) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.
        gasPrice - (optional, QUANTITY) Integer of the gasPrice used for each paid gas
        value - (optional, QUANTITY) Integer of the value sent with this transaction
        data -DATA - (optional, DATA) Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI

        2. QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block parameter
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Call'
                  - $ref: '#/components/schemas/BlockParameter'
        required: true
      responses:
        '200':
          description: DATA - the return value of executed contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: hex
                    example: "0x0"
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /v1/proxy/send_raw_transaction:
    post:
      tags:
      - proxy
      summary: Creates new message call transaction or a contract creation for signed
        transactions.
      description: |
        You can use this endpoint to reate a new message call transaction or a contract creation for signed transactions.

        Parameters

        1. DATA, The signed transaction data.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example: ["0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"]
              items:
                type: string
                format: hex
        required: true
      responses:
        '200':
          description: DATA, 32 Bytes - the transaction hash, or the zero hash if
            the transaction is not yet available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: hex
                    example: "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body

  /v1/proxy/get_storage_at:
    post:
      tags:
        - proxy
      summary: >-
        Returns the value from a storage position at a given address.
      description: >
        You can use this endpoint to get the value from a storage position at a given address.

        Parameters

        1. DATA, 20 bytes - address of the account or contract

        2. ARRAY, 32 Bytes - array of storage-keys which should be proofed and included. See eth_getStorageAt

        3. QUANTITY|TAG - integer block number, or the string "latest" or "earliest", see the default block parameter
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
                [
                  '0x1234567890123456789012345678901234567890',
                  [
                    '0x0000000000000000000000000000000000000000000000000000000000000000',
                    '0x0000000000000000000000000000000000000000000000000000000000000001'
                  ],
                  'latest'
                ]
              items:
                type: string
                format: hex
        required: true
      responses:
        '200':
          description: >-
            Returns

            DATA - the value at this storage position.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: string
                    format: hex
                    example: '0x000000000000000000000000000000000000000000000000000000000000162e'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body

  /v1/proxy/get_proof:
    post:
      tags:
        - proxy
      summary: >-  
        Returns the account- and storage-values of the specified account including the Merkle-proof.
      description: >
        You can use this endpoint to get the account- and storage-values of the specified account including the Merkle-proof.
 
        Parameters
 
          DATA, 20 Bytes - address of the storage.

          QUANTITY - integer of the position in the storage.

          QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
                [
                  '0x295a70b2de5e3953354a6a8344e616ed314d7251',
                  '0x0',
                  'latest'
                ]
              items:
                type: string
                format: hex
        required: true
      responses:
        '200':
          description: >-
            Returns Object - A account object

            balance - QUANTITY - the balance of the account. See eth_getBalance


            codeHash - DATA, 32 Bytes - hash of the code of the account. For a simple Account without code it will return "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"


            nonce - QUANTITY, - nonce of the account. See eth_getTransactionCount


            storageHash - DATA, 32 Bytes - SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.


            accountProof - ARRAY - Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key.


            storageProof - ARRAY - Array of storage-entries as requested. Each entry is a object with these properties

              key -  QUANTITY - the requested storage key

              value - QUANTITY - the storage value

              proof - ARRAY - Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: object
                    example:
                      address: '0x1234567890123456789012345678901234567890'
                      accountProof: [
                        "0xf90211a090dcaf88c40c7bbc95a912cbdd...",
                        "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e...",
                        "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a611...",
                        "0xf851808080a009833150c367df138f1538689984b8a84fc55692d..."
                      ]
                      balance: '0x0'
                      codeHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca...'
                      nonce: '0x0'
                      storageHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996c...'
                      storageProof: [
                      {
                        'key': '0x0000000000000000000000000000000000000000000000000...',
                        'value': '0x0',
                        'proof': []
                      }
                      ]
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body

  /v1/blockchain_tip:
    get:
      tags:
      - common
      summary: Get blockchain tip wich included last block hash and number.
      description: Please see the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/952434891/Blockchain+Tip">link</a>
        for details.
      responses:
        '200':
          description: The latest available block.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    $ref: '#/components/schemas/BlockchainTip'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                example:
                - success: false
                  errors:
                  - field: tip
                    code: BLOCK_NOT_FOUND
                    message: Block with hash {block_hash} not found
  /v1/wallet/assets_summary:
    get:
      tags:
      - wallet
      summary: Get token holder and either balances for blockchain address.
      description: |-
        Please see the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892330/Wallet+assets+summary">link</a> for details.

         **note**: The `Ether balance` (object with empty `address`) is always present in the response.
         **note**: Summary for the Null Account (`0x0000000000000000000000000000000000000000`) contains only fake entry
         for 0 Ether to comply with the API. Actual data for this address cannot be fetched.
      parameters:
      - $ref: '#/components/parameters/addresses'
      - $ref: '#/components/parameters/assets'
      - $ref: '#/components/parameters/blockchain_tip'
      responses:
        '200':
          description: Assets summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressSummary'
                  meta:
                    $ref: '#/components/schemas/BlockchainTipInfo'
        '400':
          description: Input parameter has failed validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/wallet/events:
    get:
      tags:
      - wallet
      summary: Get blockchain events (contract call, erc20 transfer, either transfer,
        transactions cancelation) for address.
      description: Please see the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954957872/Wallet+events+endpoint">link</a>
        for details
      parameters:
      - $ref: '#/components/parameters/include_pending_txs'
      - $ref: '#/components/parameters/blockchain_address'
      - $ref: '#/components/parameters/blockchain_tip'
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/block_number'
      - $ref: '#/components/parameters/timestamp'
      - $ref: '#/components/parameters/event_index'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of the blockchain events
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OrphanedResponse'
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        type: object
                        properties:
                          events:
                            type: array
                            items:
                              $ref: '#/components/schemas/TransactionInfo'
                          pending_events:
                            type: array
                            items:
                              $ref: '#/components/schemas/PendingTransactionInfo'
                      meta:
                        $ref: '#/components/schemas/BlockchainTipInfo'
                      paging:
                        $ref: '#/components/schemas/Paging'
              examples:
                regular:
                  $ref: '#/components/examples/WalletEventsResponseExample'
                orphaned:
                  $ref: '#/components/examples/OrphanedResponseExample'
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                example:
                - success: false
                  errors:
                  - field: blockchain_address
                    code: VALIDATION_ERROR
                    message: Query param `blockchain_address` is required
                - success: false
                  errors:
                  - field: blockchain_tip
                    code: VALIDATION_ERROR
                    message: Query param `blockchain_tip` is required
                - success: false
                  errors:
                  - field: block_range_start
                    code: VALIDATION_ERROR
                    message: query param `block range start ` is required
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                example:
                - success: false
                  errors:
                  - field: tip
                    code: BLOCK_NOT_FOUND
                    message: Block with hash {block_hash} not found
components:
  schemas:
    Account:
      type: object
      properties:
        blockNumber:
          type: integer
          description: QUANTITY - block number.
          example: 4087355
        blockHash:
          type: string
          description: DATA, 32 Bytes - hash of the block.
          format: hash
          example: "0x0e851d527ca5b1a8356a29d198c920f20da9af51edc084acaa0de481324d8f5d"
        address:
          type: string
          description: DATA, 20 Bytes - the address of the account.
          format: address
          example: "0xcd424c53f5dc7d22cdff536309c24ad87a97e6af"
        nonce:
          type: integer
          description: QUANTITY - the number of transactions made by the account
          example: 976
        code:
          type: string
          description: DATA - the code from the given address.
          format: hash
          example: "0x"
        codeHash:
          type: string
          description: DATA, 32 Bytes - hash of the code of the account.
          format: hash
          example: "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
        balance:
          type: string
          description: QUANTITY - the balance of the account.
          format: dec
          example: "1029436321514224"
    Transaction:
      type: object
      properties:
        blockHash:
          type: string
          description: DATA, 32 Bytes - hash of the block where this transaction was
            in.
          format: hash
          example: "0x2f571cb815c2d94c8e48bf697799e545c368029e8b096a730ef5e650874fbbad"
        blockNumber:
          type: integer
          description: QUANTITY - block number where this transaction was in.
          example: 119416
        timestamp:
          type: integer
          description: QUANTITY - the unix timestamp for when the block was collated.
          example: 1453686776
        from:
          type: string
          description: DATA, 20 Bytes - address of the sender.
          format: address
          example: "0x3a844524342f0"
        gas:
          type: string
          description: QUANTITY - gas provided by the sender.
          format: dec
          example: "25000"
        gasPrice:
          type: string
          description: QUANTITY - gas price provided by the sender in Wei.
          format: dec
          example: "50000000000"
        hash:
          type: string
          description: DATA, 32 Bytes - hash of the transaction.
          format: hash
          example: "0xf096ab24c5bd8abd9298cd627f5eef1ee948776d8d11127d8c47da2f0897f2c5"
        input:
          type: string
          description: DATA - the data send along with the transaction.
          format: hex
          example: "0x"
        nonce:
          type: string
          description: QUANTITY - the number of transactions made by the sender prior
            to this one.
          format: dec
          example: "543"
        r:
          type: string
          description: QUANTITY - ECDSA signature r.
          format: hex
          example: "0x23e819fa3f631c042d20b70f28f8f08ef1a2733061b92c59b43ea0997b6cf834"
        s:
          type: string
          description: QUANTITY - ECDSA signature s
          format: hash
          example: "0x1ad76eadafc639103f6ba7bc0b9f839757086669b973e601ab69efda745948e3"
        to:
          type: string
          description: DATA, 20 Bytes - address of the receiver. null when its a contract
            creation transaction.
          format: address
          example: "0xcd424c53f5dc7d22cdff536309c24ad87a97e6af"
        transactionIndex:
          type: integer
          description: QUANTITY - integer of the transaction's index position in the
            block.
          example: 84
        v:
          type: string
          description: QUANTITY - ECDSA recovery id
          format: hex
          example: "0x1c"
        value:
          type: string
          description: QUANTITY - value transferred in Wei.
          format: dec
          example: "2808270086200000000"
        status:
          type: integer
          description: QUANTITY either 1 (success) or 0 (failure)
          example: 1
    InternalTransaction:
      type: object
      properties:
        blockNumber:
          type: integer
          description: QUANTITY - block number where this transaction was in.
          example: 119416
        timestamp:
          type: integer
          description: QUANTITY - the unix timestamp for when the block was collated.
          example: 1453686776
        blockHash:
          type: string
          description: DATA, 32 Bytes - hash of the block where this transaction was
            in.
          format: hash
          example: "0x2f571cb815c2d94c8e48bf697799e545c368029e8b096a730ef5e650874fbbad"
        parentTxHash:
          type: string
          description: DATA, 32 Bytes - hash of the parent transaction.
          format: hash
          example: "0xf096ab24c5bd8abd9298cd627f5eef1ee948776d8d11127d8c47da2f0897f2c5"
        parentTxIndex:
          type: integer
          description: QUANTITY - the parent tarnsaction index.
          example: 3
        op:
          type: string
          description: The operation type ("create", "suicide", "call")
          example: suicide
        callDepth:
          type: integer
          description: The call depth
          example: 2
        from:
          type: string
          description: DATA, 20 Bytes - address of the sender.
          format: address
          example: "0xab515c53f5dc7d22cdff536309c24ad87a9fe6af"
        to:
          type: string
          description: DATA, 20 Bytes - address of the receiver.
          format: address
          example: "0xcd424c53f5dc7d22cdff536309c24ad87a97e6af"
        value:
          type: string
          description: QUANTITY - value transferred in Wei.
          format: dec
          example: "41000000000"
        gasLimit:
          type: string
          description: QUANTITY - the maximum gas allowed in this tx.
          format: dec
          example: "2300"
        input:
          type: string
          description: DATA - the data send along with the transaction.
          example: "0x"
        status:
          type: string
          description: The status of internal transaction ("success", "failed")
          example: success
        transactionIndex:
          type: integer
          description: QUANTITY - integer of the transaction's index position in the
            parent transaction.
          example: 84
    PendingTransaction:
      type: object
      properties:
        r:
          type: string
          description: QUANTITY - ECDSA signature r.
          format: hex
          example: "0x25651b1208a9606f9807ea4a140788ed8ea4f51f2aa414ceeab3d82af3dabe96"
        s:
          type: string
          description: QUANTITY - ECDSA signature s.
          format: hex
          example: "0x8f7b9d5fe2d7962771724533f72a125ffc8451a30dff1d22f0479851687d69e"
        v:
          type: string
          description: QUANTITY - ECDSA recovery id
          format: hex
          example: "0x25"
        to:
          type: string
          description: DATA, 20 Bytes - address of the receiver. null when its a contract
            creation transaction.
          format: address
          example: "0x802356d446f156dd02f82991cd94b8c15586f658"
        from:
          type: string
          description: DATA, 20 Bytes - address of the sender.
          format: address
          example: "0x612dba2d683e60767b8c32f35e4c08aaddb4bc41"
        gas:
          type: string
          description: QUANTITY - gas provided by the sender.
          format: dec
          example: "41000000000"
        gasPrice:
          type: string
          description: QUANTITY - gas price provided by the sender in Wei.
          format: dec
          example: "41000000000"
        hash:
          type: string
          description: DATA, 32 Bytes - hash of the transaction.
          format: hash
          example: "0x82622cf424795645e3714021867c4197ab2543b34fe61d22aeeff05c5c3cf67f"
        input:
          type: string
          description: DATA - the data send along with the transaction.
          example: "0xa9059cbb000000000000000000000000b443e84a3a213a0f0471fa6ee378fb4228a661100000000000000000000000000000000000000000000000000000012309ce5400"
        nonce:
          type: string
          description: QUANTITY - the number of transactions made by the sender prior
            to this one.
          format: dec
          example: "11"
        value:
          type: string
          description: QUANTITY - value transferred in Wei.
          format: dec
          example: "0"
    Block:
      type: object
      properties:
        difficulty:
          type: string
          description: QUANTITY - integer of the difficulty for this block.
          format: dec
          example: "10694243015446"
        extraData:
          type: string
          description: DATA - the "extra data" field of this block.
          format: hex
          example: "0xd983010302844765746887676f312e342e328777696e646f7773"
        gasLimit:
          type: string
          description: QUANTITY - the maximum gas allowed in this block.
          format: dec
          example: "3141592"
        gasUsed:
          type: string
          description: QUANTITY - the total used gas by all transactions in this block.
          format: dec
          example: "0"
        hash:
          type: string
          description: DATA, 32 Bytes - hash of the block.
          format: hex
          example: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
        logsBloom:
          type: string
          description: DATA, 256 Bytes - the bloom filter for the logs of the block.
            null when its pending block.
          format: hex
          example: "0x00000000000000000000000000000000000000000000000000000000001"
        miner:
          type: string
          description: DATA, 20 Bytes - the address of the beneficiary to whom the
            mining rewards were given.
          format: hex
          example: "0xf8b483dba2c3b7176a3da549ad41a48bb3121069"
        mixHash:
          type: string
          format: hex
          example: "0x02a775f306082912b617e858fef268597a277de056dbe924ee6aabfa35a33c44"
        nonce:
          type: string
          description: DATA, 8 Bytes - hash of the generated proof-of-work.
          format: dec
          example: "496358969209982823"
        number:
          type: integer
          description: QUANTITY - the block number.
          example: 900056
        parentHash:
          type: string
          description: DATA, 32 Bytes - hash of the parent block.
          format: hex
          example: "0x9e4f201db6e56a43980881cd09855b99b2f2aeefc84ffb2ad0ccf3f42de6fba2"
        receiptsRoot:
          type: string
          description: DATA, 32 Bytes - the root of the receipts trie of the block.
          format: hex
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        sha3Uncles:
          type: string
          description: DATA, 32 Bytes - SHA3 of the uncles data in the block.
          format: hex
          example: "0x2843dd2134eb02067b585e76ce6a7fc89d22d3eae1d38827b1eb15a3b5153347"
        stateRoot:
          type: string
          description: DATA, 32 Bytes - the root of the final state trie of the block.
          format: hex
          example: "0xc27aca6363fdceaed835753083b4db0bc37fab441e1414b9f051047d37dd025f"
        timestamp:
          type: integer
          description: QUANTITY - the unix timestamp for when the block was collated.
          example: 1453686776
        transactions:
          type: array
          description: Array - Array of transaction objects, or 32 Bytes transaction
            hashes
          example: ["0xc9b1ad2422ac745f91f815f14572cae74c8dd31183430c297ec2c7a902eb52db"]
          items:
            type: string
        transactionsRoot:
          type: string
          description: DATA, 32 Bytes - the root of the transaction trie of the block.
          format: hex
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        uncles:
          type: array
          description: Array - Array of uncle hashes.
          example: ["0xe0591f521db8d59f0362ad7bb946ecf98fd2d5eaf0a24b6fce378a00db6389d7"]
          items:
            type: string
        staticReward:
          type: string
          description: The static reward
          format: dec
          example: "411095732236680000"
        uncleInclusionReward:
          type: string
          description: The reward for the uncle inclusion
          format: dec
          example: "0"
        txFees:
          type: string
          description: The sum of transactions fees
          format: dec
          example: "411095732236680000"
    Uncle:
      type: object
      properties:
        difficulty:
          type: string
          description: QUANTITY - integer of the difficulty for this uncle.
          format: dec
          example: "10694243015446"
        extraData:
          type: string
          description: DATA - the "extra data" field of this uncle.
          format: hex
          example: "0xd983010302844765746887676f312e342e328777696e646f7773"
        gasLimit:
          type: string
          description: QUANTITY - the maximum gas allowed in this uncle.
          format: dec
          example: "3141592"
        gasUsed:
          type: string
          description: QUANTITY - the total used gas by all transactions in this uncle.
          format: dec
          example: "0"
        hash:
          type: string
          description: DATA, 32 Bytes - hash of the uncle.
          format: hex
          example: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
        logsBloom:
          type: string
          description: DATA, 256 Bytes - the bloom filter for the logs of the block.
            null when its pending block.
          format: hex
          example: "0x00000000000000000000000000000000000000000000000000000000001"
        miner:
          type: string
          description: DATA, 20 Bytes - the address of the beneficiary to whom the
            mining rewards were given.
          format: hex
          example: "0xf8b483dba2c3b7176a3da549ad41a48bb3121069"
        mixHash:
          type: string
          format: hex
          example: "0x02a775f306082912b617e858fef268597a277de056dbe924ee6aabfa35a33c44"
        nonce:
          type: string
          description: DATA, 8 Bytes - hash of the generated proof-of-work.
          format: dec
          example: "496358969209982823"
        number:
          type: integer
          description: QUANTITY - the uncle number.
          example: 900056
        parentHash:
          type: string
          description: DATA, 32 Bytes - hash of the parent block
          format: hex
          example: "0x9e4f201db6e56a43980881cd09855b99b2f2aeefc84ffb2ad0ccf3f42de6fba2"
        receiptsRoot:
          type: string
          description: DATA, 32 Bytes - the root of the receipts trie of the block.
          format: hex
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        sha3Uncles:
          type: string
          description: DATA, 32 Bytes - SHA3 of the uncles data in the block.
          format: hex
          example: "0x2843dd2134eb02067b585e76ce6a7fc89d22d3eae1d38827b1eb15a3b5153347"
        size:
          type: integer
          description: QUANTITY - integer the size of this block in bytes.
          example: 1081
        stateRoot:
          type: string
          description: DATA, 32 Bytes - the root of the final state trie of the block.
          format: hex
          example: "0xc27aca6363fdceaed835753083b4db0bc37fab441e1414b9f051047d37dd025f"
        timestamp:
          type: integer
          description: QUANTITY - the unix timestamp for when the block was collated.
          example: 1453686776
        totalDifficulty:
          type: string
          description: QUANTITY - integer of the total difficulty of the chain until
            this block.
          format: dec
          example: "6028818335021882784"
        transactionsRoot:
          type: string
          description: DATA, 32 Bytes - the root of the transaction trie of the block.
          format: hex
          example: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
        blockNumber:
          type: integer
          description: QUANTITY - the block number.
          example: 19190
        reward:
          type: string
          description: Uncle reward.
          format: dec
          example: "411095732236680000"
    Receipt:
      type: object
      properties:
        blockHash:
          type: string
          description: DATA, 32 Bytes - hash of the block where this transaction was
            in.
          format: hex
          example: "0xf65ef0910daed64f5bf0effa14c40908395b3df16b64b48a703bb9c7aa61e80f"
        blockNumber:
          type: integer
          description: QUANTITY - block number where this transaction was in.
          example: 900005
        contractAddress:
          type: string
          description: DATA, 20 Bytes - The contract address created, if the transaction
            was a contract creation, otherwise null.
          format: hex
          example: null
        cumulativeGasUsed:
          type: string
          description: QUANTITY - The total amount of gas used when this transaction
            was executed in the block.
          format: dec
          example: "21000"
        from:
          type: string
          description: DATA, 20 Bytes - address of the sender.
          format: hex
          example: "0x2a65aca4d5fc5b5c859090a6c34d164135398226"
        gasUsed:
          type: string
          description: QUANTITY - The amount of gas used by this specific transaction
            alone.
          format: dec
          example: "21000"
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
        logsBloom:
          type: string
          description: DATA, 256 Bytes - Bloom filter for light clients to quickly
            retrieve related logs.
          format: hex
          example: "0x000000000000000110000000000"
        root:
          type: string
          description: DATA 32 bytes of post-transaction stateroot (pre Byzantium)
          format: hex
          example: "0x5b96718cdfdda40c371eee661a8467d2edcbee0fa03aa5b5cb6a84479db3c177"
        to:
          type: string
          description: DATA, 20 Bytes - address of the receiver. null when it's a
            contract creation transaction.
          format: hex
          example: "0xcd424c53f5dc7d22cdff536309c24ad87a97e6af"
        transactionHash:
          type: string
          description: DATA, 32 Bytes - hash of the transaction.
          format: hex
          example: "0x6825feb84a806d5eb4321250b050d9aa7848d32ea052bb8c7b21d41d33f94ea9"
        transactionIndex:
          type: integer
          description: QUANTITY - integer of the transaction's index position in the
            block.
          example: 0
        status:
          type: integer
          description: QUANTITY either 1 (success) or 0 (failure)
          example: 1
    Log:
      type: object
      properties:
        address:
          type: string
          description: DATA, 20 Bytes - address from which this log originated.
          format: address
          example: "0x47071214d1ef76eeb26e9ac3ec6cc965ab8eb75b"
        blockHash:
          type: string
          description: DATA, 32 Bytes - hash of the block where this log was in. null
            when its pending.
          format: hex
          example: "0x4c285ba67d33a3cd670f5c4decfb10a41b929e7c4139766abfd60a24ee1fa148"
        blockNumber:
          type: integer
          description: QUANTITY - the block number where this log was in.
          example: 112887
        data:
          type: string
          description: DATA - contains the non-indexed arguments of the log.
          format: hex
          example: "0x00000000000000000000000013f26856cbacaaba9c4488a31c72e605fae029fc"
        logIndex:
          type: integer
          description: QUANTITY - integer of the log index position in the block.
            null when its pending log.
          example: 0
        removed:
          type: boolean
          description: TAG - true when the log was removed, due to a chain reorganization.
            false if its a valid log
          example: false
        topics:
          type: array
          description: Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log
            arguments. (The first topic is the hash of the signature of the event
            (e.g. Deposit(address,bytes32,uint256)), except you declared the event
            with the anonymous specifier.)
          example: ["0x16cdf1707799c6655baac6e210f52b94b7cec08adcaf9ede7dfe8649da926146"]
          items:
            type: string
        transactionHash:
          type: string
          description: DATA, 32 Bytes - hash of the transactions this log was created
            from. null when its pending log.
          format: hex
          example: "0xcb63b762d9522bbd712b0d8df2208c8a8dbdaeef5d7fdca3cc2dad0f34646790"
        transactionIndex:
          type: integer
          description: QUANTITY - integer of the transactions index position log was
            created from.
          example: 2
        timestamp:
          type: integer
          description: The unix timestamp
          example: 1548229016
    TokenBalance:
      type: object
      properties:
        contractAddress:
          type: string
          description: Token address
          format: address
          example: "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7"
        balance:
          type: string
          description: The balance
          example: "1000000"
        decimals:
          type: integer
          description: Token decimals
          example: 18
    Balance:
      type: object
      properties:
        balance:
          type: string
          description: The balance
          format: dec
          example: "256391824440000"
        address:
          type: string
          description: Holder address
          format: address
          example: "0xcd424c53f5dc7d22cdff536309c24ad87a97e6af"
    Contract:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
          format: address
        byteCode:
          type: string
        sourceCode:
          type: string
        abi:
          type: array
          items:
            type: object
        compilerVersion:
          type: string
        optimizationEnabled:
          type: boolean
        optimizationRuns:
          type: integer
        constructorArgs:
          type: array
          items:
            type: string
        verifiedAt:
          type: string
        token:
          type: string
    Token:
      type: object
      properties:
        contractAddress:
          type: string
          description: Token address
          format: address
          example: "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7"
        name:
          type: string
          description: Token name
          example: Jibrel Network Token
        symbol:
          type: string
          description: Token symbol
          example: JNT
        decimals:
          type: string
          description: Token decimals
          format: dec
          example: "18"
        totalSupply:
          type: string
          description: Total supply
          format: dec
          example: "200000000000000000000000"
    EthTransfer:
      type: object
      properties:
        timestamp:
          type: integer
          nullable: true
          description: The unix timestamp
          example: 1548229016
        transactionHash:
          type: string
          description: Transaction hash
          format: hex
          example: "0x3b749628d5c22d5f372d3c40a760eadd153b27a503e57688e66678d32123fb8c"
        from:
          type: string
          description: Transfer sender
          format: address
          example: "0xf73c3c65bde10bf26c2e1763104e609a41702efe"
        to:
          type: string
          description: Transfer recipient
          format: address
          example: "0x355941cf7ac065310fd4023e1b913209f076a48a"
        amount:
          type: string
          description: Transfer amount
          format: dec
          example: "1664600000000000000000"
    TokenTransfer:
      type: object
      properties:
        timestamp:
          type: integer
          description: The unix timestamp
          example: 1548229016
        transactionHash:
          type: string
          description: Transaction hash
          format: hex
          example: "0x3b749628d5c22d5f372d3c40a760eadd153b27a503e57688e66678d32123fb8c"
        from:
          type: string
          description: Transfer sender
          format: address
          example: "0xf73c3c65bde10bf26c2e1763104e609a41702efe"
        to:
          type: string
          description: Transfer recipient
          format: address
          example: "0x355941cf7ac065310fd4023e1b913209f076a48a"
        contractAddress:
          type: string
          description: Token address
          format: address
          example: "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7"
        amount:
          type: string
          description: Transfer amount
          format: dec
          example: "1664600000000000000000"
        decimals:
          type: integer
          description: Token decimals
          example: 18
    TokenHolder:
      type: object
      properties:
        accountAddress:
          type: string
          description: Token holder address
          format: address
          example: "0xfdbacd53b94c4e76742f66a9f235a5d1e5218bb0"
        contractAddress:
          type: string
          description: Token address
          format: address
          example: "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7"
        balance:
          type: integer
          description: Token balance
          example: 1000000
        decimals:
          type: integer
          description: Token decimals
          example: 18
    AssetSummary:
      type: object
      properties:
        address:
          type: string
          description: Token address
          format: address
          example: "0xfdbacd53b94c4e76742f66a9f235a5d1e5218bb0"
        balance:
          type: string
          description: Token balance
          format: dec
          example: "1000"
        decimals:
          type: string
          description: Token decimals
          format: dec
          example: "18"
        transfersNumber:
          type: integer
          description: The number of transfers
          example: 1
    AddressSummary:
      type: object
      properties:
        address:
          type: string
          description: An account address
          format: address
          example: "0xfdbacd53b94c4e76742f66a9f235a5d1e5218bb0"
        outgoingTransactionNumber:
          type: string
          description: The number of outgoing transactions
          format: dec
          example: "1"
        assetsSummary:
          type: array
          example:
          - address: "0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27"
            balance: "202"
            decimals: "18"
            transfersNumber: 1
          - address: "0x0d8775f648430679a709e98d2b0cb6250d2887ef"
            balance: "42340258498435"
            decimals: "18"
            transfersNumber: 1
          items:
            $ref: '#/components/schemas/AssetSummary'
    BlockchainTip:
      type: object
      properties:
        blockHash:
          type: string
          description: The latest block hash as blockchain tip.
          format: hex
          example: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
        blockNumber:
          type: integer
          description: The latest block number in network.
          example: 900056
    BlockchainTipInfo:
      type: object
      properties:
        currentBlockchainTip:
          $ref: '#/components/schemas/BlockchainTip'
        blockchainTipStatus:
          type: object
          properties:
            blockHash:
              type: string
              description: The block hash from request query.
              format: hex
              example: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
            blockNumber:
              type: integer
              description: The block number from request query.
              example: 900056
            isOrphaned:
              type: boolean
              description: If value is positive - then tip is in a fork block.
              example: false
            lastUnchangedBlock:
              type: integer
              nullable: true
              description: The latest block in a canonical chain. Client should invalidate
                cache since this block number.
              example: 0
    WalletEvent:
      type: object
      properties:
        eventDirection:
          type: string
          description: The event direction ("in", "out")
          example: in
        eventType:
          type: string
          description: The event type ("eth-transfer", "contract-call", "erc20-transfer",
            "tx-cancellation")
          example: eth-transfer
        eventIndex:
          type: integer
          description: This is the index of an events used for distinguishing different
            events within one TX
          example: 0
        eventData:
          type: array
          items:
            type: object
            properties:
              fieldName:
                type: string
                description: Name of field
                example: asset
              fieldValue:
                oneOf:
                  - type: string
                    description: Value of field
                    example: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
                  - type: integer
                    description: Value of field
                    example: 12
    TransactionInfo:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        events:
          type: array
          items:
            $ref: '#/components/schemas/WalletEvent'
    PendingTransactionInfo:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/PendingTransaction'
        events:
          type: array
          items:
            $ref: '#/components/schemas/WalletEvent'
    Error:
      type: object
      properties:
        field:
          type: string
          example: NON_FIELD_ERROR
        code:
          type: string
          example: ERR_CODE
        message:
          type: string
          example: some err text
    Errors:
      type: array
      example: []
      items:
        $ref: '#/components/schemas/Error'
    ErrorResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          nullable: true
          example: null
    Status:
      type: object
      properties:
        success:
          type: boolean
          example: true
        errors:
          $ref: '#/components/schemas/Errors'
    Call:
      type: object
      properties:
        from:
          type: string
          description: The address the transaction is sent from.
          example: "0x8aff0a12f3e8d55cc718d36f84e002c335df2f4a"
        to:
          type: string
          description: The address the transaction is directed to.
          example: "0x5c7687810ce3eae6cda44d0e6c896245cd4f97c6"
        gas:
          type: string
          description: Integer of the gas provided for the transaction execution.
          format: hex
          example: "0x10000"
        gasPrice:
          type: string
          description: Integer of the gas provided for the transaction execution.
          format: hex
          example: "0x1"
        value:
          type: string
          description: Integer of the value sent with this transaction.
          format: hex
          example: "0x0"
        data:
          type: string
          description: Hash of the method signature and encoded parameters.
          example: "0x6740d36c0000000000000000000000000000000000000000000000000000000000000005"
    BlockParameter:
      type: object
      description: An integer block number, or the string "latest", "earliest" or
        "pending"
      example: latest
    Paging:
      type: object
      properties:
        link:
          type: string
          nullable: true
          description: The current page of data (relative url).
          format: url
          example: /v1/...
        link_kwargs:
          type: object
          nullable: true
          properties: {}
          description: The current link keyword arguments
          example:
            order: asc
            limit: 20
        next:
          type: string
          nullable: true
          description: The next page of data (relative url). The server MUST determine
            whether a next page exists, and return null as the next link if not.
          format: url
          example: /v1/...
        next_kwargs:
          type: object
          nullable: true
          properties: {}
          description: The next link keyword arguments
          example:
            order: asc
            limit: 20
        progress:
          type: integer
          description: Show the cursor progress. It can be wrong nearly to begin and
            end of query.
          example: 23
      description: The paging object that’s a sibling of the paginated data
    OrphanedResponse:
      type: object
      description: Special data object indicating that data consistency has been
        violated.
      properties:
        isOrphaned:
          type: boolean
  parameters:
    address:
      name: address
      in: path
      description: Account address
      required: true
      schema:
        type: string
        format: address
    blockchain_address:
      name: blockchain_address
      in: query
      description: Blockchain account address
      required: true
      schema:
        type: string
        format: address
    blockchain_tip:
      name: blockchain_tip
      in: query
      description: <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/952434891/Blockchain+Tip">Blockchain
        tip</a> (as block hash from /v1/blockchain_tip)
      schema:
        type: string
    include_pending_txs:
      name: include_pending_txs
      in: query
      description: Determines whether pending transactions are included in the response
      schema:
        type: boolean
    addresses:
      name: addresses
      in: query
      description: Comma-separated list of addresses. Separate addresses by comma,
        up to a maxium of 20 accounts in a single batch
      required: true
      schema:
        type: string
        format: addresses
    contract_addresses:
      name: contract_addresses
      in: query
      description: Comma-separated list of contract addresses. Separate addresses
        by comma, up to a maxium of 20 accounts in a single batch
      required: true
      schema:
        type: string
        format: addresses
    assets:
      name: assets
      in: query
      description: Comma separated asset addresses
      schema:
        type: string
        format: address
    contract_address:
      name: contract_address
      in: path
      description: Contract address
      required: true
      schema:
        type: string
        format: address
    tag:
      name: tag
      in: path
      description: block hash, block number or "latest" keyword
      required: true
      schema:
        type: string
    tagOptional:
      name: tag
      in: query
      description: block hash, block number or "latest" keyword
      schema:
        type: string
    txhash:
      name: txhash
      in: path
      description: transaction hash
      required: true
      schema:
        type: string
    order:
      name: order
      in: query
      description: Items ordering direction
      schema:
        type: string
        enum: [desc, asc]
    block_number:
      name: block_number
      in: query
      description: A block number value that points to the start of the range of block-number-based
        data. Please see the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        oneOf:
          - type: integer
          - type: string
            enum: [latest]
    uncle_number:
      name: uncle_number
      in: query
      description: An uncle number value that points to the start of the range of
        uncle-number-based data. Please see the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        oneOf:
          - type: integer
          - type: string
            enum: [latest]
    timestamp:
      name: timestamp
      in: query
      description: Instead of block-number you may use a Unix timestamp value that
        points to the start of the range of time-based data. Filtration can be either
        by number or by timestamp only. Please se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        oneOf:
          - type: integer
          - type: string
            enum: [latest]
    transaction_index:
      name: transaction_index
      in: query
      description: A transaction index that points to the start of the range data.
        Please se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
    parent_transaction_index:
      name: parent_transaction_index
      in: query
      description: A parent transaction index that points to the start of the requested
        data. Please se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
    id:
      name: id
      in: query
      description: A last synced row id that points to the start of the requested
        data. Please se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
    log_index:
      name: log_index
      in: query
      description: A log index that points to the start of the requested data. Please
        se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
    event_index:
      name: event_index
      in: query
      description: A event index that points to the start of the requested data. Please
        se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
    limit:
      name: limit
      in: query
      description: Limit the number of records returned based on a limit value. Please
        se the following <a href="https://jibrelnetwork.atlassian.net/wiki/spaces/JSEARCH/pages/954892374/API+pagination#APIpagination-Uniquefilterssetsforendpoints:">link</a>
        for details.
      schema:
        type: integer
  examples:
    StatusSuccessExample:
      value:
        status: true
        errors: []
    MetaExample:
      value:
        currentBlockchainTip:
          block_hash: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
          block_number: 8000000
        blockchainTipStatus:
          blockHash: "0x88a6bc42f4f65a0daab3a810444c2202d301db04d05203a86342b35333ac1413"
          blockNumber: 900056
          isOrphaned: false
          lastUnchangedBlock: null
    PagingExample:
      value:
        link: "/v1/..."
        link_kwargs:
          order: asc
          limit: 20
        next: "/v1/..."
        next_kwargs:
          order: asc
          limit: 20
        progress: 23
    OrphanedResponseExample:
      value:
        isOrphaned: true
    AccountsBalancesResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "address": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
              "balance": "474000000000000"
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    AccountResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          {
            "blockNumber": 9094494,
            "blockHash": "0xfbaee04d3ef77fc4af424402a7923c800aab3bf00ee23b8495d216cc90e47f47",
            "address": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
            "nonce": 6031977,
            "code": "0x",
            "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
            "balance": "12389035795907504666"
          }
        meta:
          $ref: '#/components/examples/MetaExample'
    AccountLogsResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "address": "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7",
              "blockHash": "0xc5ecf5800ca7aaeca756aebb9a4397bcb5338b97711aeb7784fe6fd9e4fd0d02",
              "blockNumber": 9093982,
              "timestamp": 1576148171,
              "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
              "logIndex": 19,
              "removed": false,
              "topics": [
                "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                "0x000000000000000000000000fde25413d1e97801a36c4b7dffd06fe87fcbb396",
                "0x00000000000000000000000057d3bc6f91622c21b348b190febc6a8f105ab6a1"
              ],
              "transactionHash": "0x4f9e622eda52f06b42ef513b8ec09f68e25bfd398041e8a90c2967b9d7b0ec1d",
              "transactionIndex": 20
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    AccountTransactionsResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "blockHash": "0x04ffa4a7f2554b3c1be8b59ae5c4fdba749f3b0577868c1c10a8490aa6f40659",
              "blockNumber": 9094478,
              "timestamp": 1576155672,
              "from": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
              "gas": "0x186a0",
              "gasPrice": "0x165a0bc00",
              "hash": "0x6437c444498aeb56cceffb6a0df393f67c8fae46689e9680c6eb81cfa3d31101",
              "input": "0x",
              "nonce": "0x5c0a68",
              "r": "0x7d513f46c7f71f75e7cad4774f082aa651ad4a628a2bd44a32b562bdcbf45869",
              "s": "0x348017c97ebdc528409ea360f238a2862786e76c7a89e4e2c8868455b5890683",
              "to": "0x8fd00f170fdf3772c5ebdcd90bf257316c69ba45",
              "transactionIndex": 80,
              "v": "0x26",
              "value": "0x4b4bc395812efa2f9",
              "status": 1
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    AccountInternalTransactionsResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "blockNumber": 8347461,
              "blockHash": "0x1bd7181ffcde5cf09b0c9c2596b92a2c1da24627e98c1c18aff8519943207baf",
              "timestamp": 1565770159,
              "parentTxHash": "0xbb253d97eeeb602ae76071b675721fdba1b8fcb70b4fe1fab9b32964e5fbf613",
              "parentTxIndex": 48,
              "op": "call",
              "callDepth": 2,
              "from": "0x893dae013b055065839d49b0aba06dd6f10e2359",
              "to": "0xa3bfbc2b995ecc629a1d2668a04e23c31a50fa27",
              "value": "111653139458242922",
              "gasLimit": "9341",
              "input": "0x",
              "status": "success",
              "transactionIndex": 3
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    AccountTokenBalanceResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          {
            "accountAddress": "0x57d3bc6f91622c21b348b190febc6a8f105ab6a1",
            "contractAddress": "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7",
            "balance": "1000000000000000000",
            "decimals": 18
          }
        meta:
          $ref: '#/components/examples/MetaExample'
    BlocksResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "difficulty": "2490533620867858",
              "extraData": "0x7070796520e4b883e5bda9e7a59ee4bb99e9b1bc",
              "gasLimit": "9911299",
              "gasUsed": "127049",
              "hash": "0xe5e8964520ed75fefd863980fe947ef44c9b602ce9a182ea36355f07e167004b",
              "logsBloom": "",
              "miner": "0x829bd824b016326a401d083b33d092293333a830",
              "mixHash": "0x93c5c4b57831c8c1fa1cb3e3d6ff4a0e1f143b9059066a56fe5fd7de41778dfd",
              "nonce": "0x9b1725e8047b0172",
              "number": 9094505,
              "parentHash": "0xc33200ee8bb91fbe9929c69bf3158a796e080219908abd00486b9a30685bde25",
              "receiptsRoot": "0x18e1d378c80ea5c973be83623b7917283b735ff03ca6744bcdac14246dfb936a",
              "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
              "stateRoot": "0xf2bf4061729c91483f27a440171b47a93d45386ba6926ad7f42fcd08ecfdd3a9",
              "timestamp": 1576156063,
              "transactions": [
                "0xeace85b1f906680a5a8d6a753cf359fcd3a597aefd2c47d75dfed2fef8f7c3e0",
                "0x1109425f3591fefcc594fb8cff37998592289d542b82e24be8cd9a151d80af74",
                "0x0083fe4c73a10bb4a0260292b26019161e6ef2248b584bc41e834578d4561deb"
              ],
              "transactionsRoot": "0x70efbb2a876f90472d2c4615c432a5cca54a89e9eccfd8adc22ab50b81e1458c",
              "uncles": [],
              "staticReward": "2000000000000000000",
              "uncleInclusionReward": "0",
              "txFees": "2404590000000000"
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    UnclesResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "difficulty": "2489983865053970",
              "extraData": "0x5050594520737061726b706f6f6c2d6574682d636e2d687a31",
              "gasLimit": "9887142",
              "gasUsed": "9882693",
              "hash": "0x8e26c4d03a29990f0f7f2158e5493e73b6bd57b92035b091afec5439606c84e6",
              "logsBloom": "",
              "miner": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
              "mixHash": "0xee6320f4ca5bfccdcd84f59ab9f14cc411214f08ec30c30aadd7f9c5b650ec4d",
              "nonce": "0x8af8c7ecf34e200e",
              "number": 9094503,
              "parentHash": "0xefaca876a85ea7d5e07b49d976f1c9b50092e444ebf74c92e664dfbfa7ec2002",
              "receiptsRoot": "0xd3d811e965d2191e642729f4ef9a3c57c388ff2b447ff770befc7f2f4f4b0b98",
              "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
              "stateRoot": "0xc132f932c160a36169617bd0a18cbd6f72dd3036bcef9faeaf5e2d8b92b61271",
              "timestamp": 1576156029,
              "transactionsRoot": "0xd37c35f742274609bf0a5f6e679c33980255563a03a1417a6f7d542148c55db8",
              "blockNumber": 9094504,
              "reward": "1750000000000000000"
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    TokenTransfersResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "transactionHash": "0x4f9e622eda52f06b42ef513b8ec09f68e25bfd398041e8a90c2967b9d7b0ec1d",
              "timestamp": 1576148171,
              "from": "0xfde25413d1e97801a36c4b7dffd06fe87fcbb396",
              "to": "0x57d3bc6f91622c21b348b190febc6a8f105ab6a1",
              "contractAddress": "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7",
              "amount": "1000000000000000000",
              "decimals": 18,
              "blockNumber": 9093982,
              "logIndex": 19,
              "transactionIndex": 20
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    TokenHoldersResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          [
            {
              "accountAddress": "0xfdbacd53b94c4e76742f66a9f235a5d1e5218bb0",
              "contractAddress": "0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7",
              "balance": 1000000,
              "decimals": 18
            }
          ]
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
    WalletEventsResponseExample:
      value:
        status:
          $ref: '#/components/examples/StatusSuccessExample'
        data:
          {
            "events": [
              {
                "transaction": {
                  "blockHash": "0x04ffa4a7f2554b3c1be8b59ae5c4fdba749f3b0577868c1c10a8490aa6f40659",
                  "blockNumber": 9094478,
                  "timestamp": 1576155672,
                  "from": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
                  "gas": "0x186a0",
                  "gasPrice": "0x165a0bc00",
                  "hash": "0x6437c444498aeb56cceffb6a0df393f67c8fae46689e9680c6eb81cfa3d31101",
                  "input": "0x",
                  "nonce": "0x5c0a68",
                  "r": "0x7d513f46c7f71f75e7cad4774f082aa651ad4a628a2bd44a32b562bdcbf45869",
                  "s": "0x348017c97ebdc528409ea360f238a2862786e76c7a89e4e2c8868455b5890683",
                  "to": "0x8fd00f170fdf3772c5ebdcd90bf257316c69ba45",
                  "transactionIndex": 80,
                  "v": "0x26",
                  "value": "0x4b4bc395812efa2f9",
                  "status": 1
                },
                "events": [
                {
                  "eventType": "eth-transfer",
                  "eventIndex": 90944780800000,
                  "eventData": [
                  {
                    "fieldName": "sender",
                    "fieldValue": "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c"
                  },
                  {
                    "fieldName": "recipient",
                    "fieldValue": "0x8fd00f170fdf3772c5ebdcd90bf257316c69ba45"
                  },
                  {
                    "fieldName": "amount",
                    "fieldValue": "86810323567724438265"
                  },
                  {
                    "fieldName": "status",
                    "fieldValue": 1
                  }
                  ],
                  "eventDirection": "out"
                }
                ]
              }
            ],
            "pendingEvents": []
          }
        meta:
          $ref: '#/components/examples/MetaExample'
        paging:
          $ref: '#/components/examples/PagingExample'
